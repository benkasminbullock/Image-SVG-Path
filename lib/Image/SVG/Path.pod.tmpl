[% start_year=2011 %]
[% MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://api.metacpan.org/source/BKB/Image-SVG-Path-[% version %]/examples/[% pl %]> in the distribution.)
[% END %]
=encoding UTF-8

=head1 NAME

Image::SVG::Path - read the "d" attribute of an SVG path

=head1 SYNOPSIS

[% INCLUDE "synopsis.pl" | xtidy %]

=head1 VERSION

This documents version [% version %] of Image::SVG::Path corresponding to git
commit [% commit.commit %] released on [% commit.date %].

=head1 DESCRIPTION

This module extracts information contained in the "d" attribute of an
SVG <path> element and turns it into a simpler series of steps. 

For example, an SVG <path> element might take the form

    <path d="M9.6,20.25c0.61,0.37,3.91,0.45,4.52,0.34c2.86-0.5,14.5-2.09,21.37-2.64c0.94-0.07,2.67-0.26,3.45,0.04"/>

Using an XML parser, such as L<XML::Parser>,

[% example("xml-parser") %]

SVG means "scalable vector graphics" and it is a standard of the W3
consortium. See L</SVG standards> for details.  Although SVG is a type
of XML, the text in the C<d> attribute of SVG paths is not XML but a
condensed form using single letters and numbers. This module is a
parser for that condensed format.

=head1 FUNCTIONS

=head2 extract_path_info

    my @path_info = extract_path_info ($path_d_attribute);

Turn the SVG path string into a series of simpler things. For example,

[% example ("extract-path-info") %]

The return value is a list of hash references. Each hash reference has
at least three keys, C<type>, C<position>, and C<svg_key>. The C<type>
field says what type of thing it is, for example a cubic bezier curve
or a line. The C<position> value is either "relative" or "absolute"
depending on whether the coordinates of this step of the path are
relative to the current point (relative) or to the drawing's origin
(absolute). The C<svg_key> field is the original key from the
path. C<position> is relative if this key is lower case and absolute
if this key is upper case.

If C<type> is C<moveto>, the hash reference contains one more field,
C<point>, which is the point to move to. This is an array reference
containing the I<x> and I<y> coordinates as elements indexed 0 and 1
respectively.

If the type is C<cubic-bezier>, the hash reference contains three more
fields, C<control1>, C<control2> and C<end>. The value of each is an
array reference containing the I<x> and I<y> coordinates of the first
and second control points and the end point of the Bezier curve
respectively. (The start point of the curve is the end point of the
previous part of the path.)

If the type is C<shortcut-cubic-bezier>, the hash contains two more
fields, C<control2> and C<end>. C<control2> is the second control
point, and C<end> is the end point. The first control point is got by
reflecting the second control point of the previous curve around the
end point of the previous curve (the start point of the current
curve). 

There is also an option L</no_shortcuts> which automatically replaces
shortcut cubic bezier curves with the normal kind, by calculating the
first control point.

A second argument to C<extract_path_info> contains options for the
extraction in the form of a hash reference. For example,

    my @path_info = extract_path_info ($path, {absolute => 1});

The following may be chosen by adding them to the hash reference:

=over

=item absolute

If the hash element C<absolute> is set to a true value, relative
positions are changed to absolute. For example a "c" curve is changed
to the equivalent "C" curve.

=item no_shortcuts

If the hash element C<no_shortcuts> is set to a true value then
shortcuts ("S" curves) are changed into the equivalent "C" curves. A
deficiency of this is that it only works in combination with the
"absolute" option, otherwise it does nothing.

=item verbose

If this is set to a true value, C<extract_path_info> prints out
informative messages about what it is doing as it parses the path.

=back

=head2 reverse_path

    my $reverse_path = reverse_path ($path);

Make an SVG path which is the exact reverse of the input.

This only works for cubic bezier curves with absolute position and no
shortcuts (C elements only). It doesn't fill in all the information
correctly.

[% example("test-reverse") %]

=head2 create_path_string

    my $path = create_path_string (\@info);

Given a set of information as created by L</extract_path_info>, turn
them into an SVG string representing a path.

This only works for cubic bezier curves and the initial moveto element
for absolute position and no shortcuts (C elements only).

=head1 SVG path elements

This section documents the output elements. If the path is extracted
using

    my @path = extract_path_info ($d);

then the elements of C<@path> are each hash references which contain
one of the following kinds of elements, depending on what is next on
the path. 

=head2 Move to elements

=over

=item type

This is C<moveto>.

=item svg_key

This is M or m.

=item point

This is the point to move to.

=back

=head2 Line elements

=over

=item type

This is C<lineto>.

=item svg_key

This is L or l.

=item point

This is the end point of the line.

=item end

This field occurs in some lines for backwards compatibility with
pre-0.16 versions of the module.

=back

=head2 Cubic bezier curve elements

=over

=item type

This is C<cubic-bezier>.

=item svg_key

This is C or c.

=item control1

Control point 1 of the curve.

=item control2

Control point 2 of the curve.

=item end

The end point of the curve.

=back

=head2 Shortcut cubic bezier curve elements

Use the L</no_shortcuts> option to automatically convert these into
cubic bezier curve elements.

=over

=item type

This is C<shortcut-cubic-bezier>.

=item svg_key

This is S or s.

=item control2

This is the second control point of the curve (the first one is implicit).

=item end

This is the end point of the curve.

=back

=head2 Quadratic bezier curve elements

=over

=item type

This is C<quadratic-bezier>.

=item svg_key

This is Q or q.

=item control

This is the control point.

=item end

This is the end point.

=back

=head2 Shortcut quadratic Bezier curves

Use the L</no_shortcuts> option to automatically convert these into
quadratic bezier curves.

=over

=item type

This is C<shortcut-quadratic-bezier>.

=item svg_key

This is T or t.

=item end

This is the end point.

=back

=head2 Arc elements

=over

=item type

This is C<arc>.

=item rx, ry

X and Y radiuses

=item x_axis_rotation

See L<the SVG documentation|/SVG specification> for details.

=item large_arc_flag

See L<the SVG documentation|/SVG specification> for details.

=item sweep_flag

See L<the SVG documentation|/SVG specification> for details.

=item x, y

These are the end points of the arc.

=back

Arcs are omitted from L</SVG Tiny>.

=head2 Horizontal line elements

=over

=item type

This is C<horizontal-line-to>.

=item svg_key

This is H or h.

=item x

This is the x coordinate of the end point. The y coordinate is implicit.

=back

=head2 Vertical line elements

=over

=item type

This is C<vertical-line-to>.

=item svg_key

This is V or v.

=item y

This is the y coordinate of the end point. The x coordinate is implicit.

=back

=head2 Closepath elements

=over

=item type

This is C<closepath>.

=item svg_key

This is Z or z.

=back

Each hash reference also contains the field C<position>, which has
either the value C<absolute> or C<relative> depending on whether
C<svg_key> is upper case or lower case, respectively. A field C<name>
also exists. However, these fields and C<type> are rather useless. See
L</Some of the path element data is redundant>.

=head1 BUGS

=over

=item Does not use the grammar

There is a grammar for the paths in the W3 specification. See
L<http://www.w3.org/TR/SVG/paths.html#PathDataBNF>. However, this
module does not use that grammar. Instead it hacks up the path using
regexes.

=item Some of the path element data is redundant

Some of the data fields of the hash elements shown under L</SVG path
elements> are redundant. A future major re-version of the module may
remove some of these. I suggest using the C<svg_key> field rather than
the C<name>, C<type> and C<position> fields.

=back

=head1 EXPORTS

None of the functions is exported by default.

     use Image::SVG::Path ':all';

exports all of L</extract_path_info>, L</reverse_path> and
L</create_path_string>.

=head1 SEE ALSO

=head2 Other CPAN modules

=over

=item L<SVG::Rasterize>

This contains a complete parser for SVG paths in
C<SVG::Rasterize::Engine::PangoCairo>. It is embedded into the module
and is used to draw with L<Cairo>.

=item L<MarpaX::Languages::SVG::Parser>

This parser uses the SVG grammar mentioned in L</BUGS>.

=item L<SVG::Estimate>

This is an application of Image::SVG::Path which uses it to estimate
the lengths of the paths of SVG images.

=item L<Image::CairoSVG>

This is a least-effort module by the same author as Image::SVG::Path
which renders some kinds of SVGs using L<Cairo>.

=item L<Image::LibRSVG>

Render SVG via a Gnome library.

=back

=head2 SVG standards

=over

=item SVG specification

L<The full specification|http://www.w3.org/TR/SVG/> contains all the
details. The L<SVG path
specification|http://www.w3.org/TR/SVG/paths.html> contains the
specifications for paths.

=item SVG Tiny

L<SVG Tiny|http://www.w3.org/TR/SVGTiny12/index.html> is a subset of
SVG. It claims to have a L<Perl Language
Binding|http://www.w3.org/TR/SVGTiny12/perl-binding.html>, but I
cannot locate the source code.

=item SVG basic

There is also another standard, SVG basic, I'm not too sure whether
either this or SVG Tiny are in use.

=back

=head1 ACKNOWLEDGEMENTS

Colin Kuskie (L<http://www.perldreamer.com/>) fixed error messages for
version 0.20, number paths for version 0.21, implicit line-tos for
version 0.22, implicit arc commands for version 0.23, and multiple
closepaths for version 0.24.

[% INCLUDE "author" %]
